1.
#include<stdio.h>

#include<string.h

#include<conio.h>

#define N strlen(g)

char t[128], cs[128] ,g[]="10110";

int a, e, c;
void xor() {
for( c = 1; c < N ;c++) cs[c]=((cs[c]==g[c])?'0':'1');
}

void crc() {

for(e-0;e<N;e++ ) cs[e] = t[e] ;

do 
{
( if(cs[0]='1') xor(); 
for(c=0; c <N- 1 ;c++) cs[c]=cs[c+1]; 
cs[c] =t[e++];

} while(e <= a + N - 1 )

} 
void main() {

printf("\nEnter poly: "); scanf("%s",t); 
printf("\nGenerating Polynomial is: %s",g);

a=strlen(t);

for(e-a; e < a + N - 1 ;e++) t[e]='0'; // N length of generating polynomial 
printf("\nModified t[u] is: %s",t);

crc();

printf("\nChecksum is: %s",cs);

for(e=a;e<a+N-1;e++) t[e]=cs[e-a); 
printf("\nFinal Codeword is :%s,t"); 
int check,gg; 
printf("\nTest Error detection 0(yes) 1(no) ?"); 
scanf("%d",&check); 
if(check=0){

  printf("\nEnter position where you want to insert error: "); 
  scanf("%d",&gg);
  t[gg]=(t[gg]=='1'?'0':'1');
  printf("\nErromneous data: %s",t); 
  printf("\nError Detected");
}
else{

printf("\nno Error Detected");

}

getch():
}

OutPut:

Enter poly: 1101011011

Generating Polynomial is: 10110

Modified t[u] is: 11010110110000

Checksum is: 1000

Final Codeword is: 11010110111000

Test Error detection 0(yes) 1(no)?:0

Enter position where you want to insert error: 3

Erroneous data: 11000110111000

Error detected.

2.
#include<stdio.h>

#include<conio.h>

#include<string.h>

void main()
{
  {
char ch,arr[50]=("01111110"),rec[50];

int i,j,k,len=8,cnt=0;

printf("n enter the data:\n");

while((ch=getche())!='\r') 

if(ch=='1')

cnt++;

else

cnt=0;

arr[len++]=ch

if(cnt==5)
{
arr[len++]='0';

cnt=0;
}
}

strcat(arr,"01111110"); 
printf("\n bit stuffed stream is :\n" ); 
for(i=0;i<len+8;i++)

printf("%c",arr[i]);

//destuffing

cnt=0;
printf("\n the destuffed stream is: \n");
for(j=8,k=0;j<len;j++)
{
if( anr[j] =='1')

cnt++;

else

cnt=0;

rec[k++]=arr[j];

if(cnt==5&&arr[j + 1] =='0')
{
j++;

cnt=0;

}

}

for(j=0;j<k;j++)

printf("%c",rec[j]);

}

getch();

}

Output

Original Data: 0111000111111010

Stuffed data: 011111100111000111110101001111110

3.
#include<stdio.h>

#include<conio.h>

#define DLE 16

#define STX 2

#define ETX 3

void main()
{
char ch, arr[50] = {DLE, STX}, rec[50];

int len=2,i,j;

//clrscr();

printf("enter the data stream:ctrl+p->DLE ctrl+b->STX ctrl+c->ETX \n");
while((ch=getch())!='\r')
{
if(ch == DLE)
{
arr[len++]=DLE;

printf("DLE");
}
else if(ch = STX)

printf("STX"); 
else if(ch = ETX) 
printf("ETX");
else printf("%c",ch);

arr[len++]=ch;
}
arr[len++]=DLE;

arr[len++] = ETX;

printf("\n the stuffed stream is: \n");

for(i=0;i<len;i++)
{
ch = arr[i];

if(ch == DLE) 
printf("DLE"); 
else if(ch==STX)
printf("STX"); 
else if(ch==ETX) 
printf("ETX"); 
else printf("%c",ch);
}
/destuffing

printf("\n the destuffed data dtream is: \n"); 
for(j=2; j<len-2;j++)
{
ch=arr[j]; 
if(ch==DLE)
{
printf("DLE");
j++;
}
else if(ch=STX) 
printf("STX"); 
else if(ch==ETX) 
printf("ETX"); 
else printf("%c",ch);
}
getch();
}

Output:

i) Original data: MSRITECE 
Stuffed data: DLESTX MSRITECE DLEETX

ii) Original data DLE MSRITECEDLE
Stuffed data: DLESTX DLEDLE MSRITECEDLE DLE DLEETX

4.
#include <stdio.h>

#include <ctype.h>

#include <conio.h>

#define MAX 1000

int main()
{
{
int s, pi, ci;

char plain[MAX], cipher[MAX];

printf("*** Encryption & decryption using substitution cipher ***\n\n");

printf("Enter the plain text:\n");

gets(plain);

while(1)
{
printf("\nKey (number of shifts per character) for encryption: "); 
scanf("%d", &s); 
if(s <1 || s>25)
printf("Bad input! Enter a value between 1 and 25."); 
else
break;
}

printf("\nAfter removing non alphabetical characters and capitalizing:\n")

for(ci=0, pi=0; plain[pi] !='\0'; pi++)

if(isalpha(plain[pi])) // If a character passed to isalpha() is an alphabet, returns 0

putchar(toupper(plain[pi]));

// The toupper() function is used to convert lowercase alphabet to upperc //putchar() function is a file handling function in which is used to write output/screen.

cipher[ci++]=((toupper(plain[pi]) - 'A') + s% 26 ) % 26+ 'A';
}
cipher[ci]='\0';

printf("\n\nAfter encryption:\n%s\n", cipher);

while(1)
{
printf("\nKey for decryption: ");

scanf("%d", &s);

if(s< 1 || s>25)

printf("Bad input! Enter a value between 1 and 25."); 
else

break;
}

for(pi=0, ci=0; cipher[ci] != '\0'; ci++)

plain[pi++)=((cipher[ci] - 'A')+(26-s)) % 26+ 'A';

plain[pi]='\0';

printf("\nAfter decryption:\n%s", plain);

//return 0;
}
getch();

}

Output:

i)Plain text: XYZ

Key=2

Cipher text: ZAB

ii)Plain text: WIRELESS DATACOMMUNICATION

Key=any key

Cipher text:

5. 
%Log-Normal Path Loss Indoor Propagation Model With Shadow

clc;
close all;
clear all;

d0=input('enter the reference distance:");


d=1000:1000:20000;

n=[2.2 1.8 3.0 2.4 2.6 2.0 2.1 1.8 1.6 3.0 3.1 3.3];

f=[914 914 1500 900 1900 1300 4000 1300 1300 900 1000 1300]; 
sigma =[8.7 5.2 7.0 9.6 14.1 3.0 7.0 6.0 5.8 7.0 9.7 6.8];

for i=1:12

lambda(i)=3e8/(f(i)*10^6);

PL_d0(i)=-10log10((lambda(i)^2)/((4*pi*d0)^2));

X(i)=sigma(i)*randn(size(PL_d0(i)));

disp(X(i));

end

for i=1:12

for j=1:20

PL(i,j)= PL_d0(i)+10*n(i)*log10(d(j)/d0)+X(i);

end

end

%Distance Vs Path Loss

plot (d,PL);

legend (retail store', 'grocery store', 'office hard partition', 'office soft partition', 'textile/chemical', 'paper/ cereals', 'metalworking', 'indoor street', 'textile/chemical, metalworking'); 
xlabel ('distance in m');
ylabel ('path loss in dB');

title ('LOG-DISTANCE PATH LOSS INDOOR PROPAGATION MODEL WITH SHADOWING EFFECT');

grid on;

enter the reference distance:30

6.
%Log-Distance Path Loss Indoor Propagation Model (without sha

clc;
close all;
clear all;

d0=input('enter the reference distance:");


d=1000:1000:20000;

n=[2.2 1.8 3.0 2.4 2.6 2.0 2.1 1.8 1.6 3.0 3.1 3.3];

f=[914 914 1500 900 1900 1300 4000 1300 1300 900 1000 1300]; 
X = 0;
for i=1:12

lambda(i)=3e8/(f(i)*10^6);

PL_d0(i)=-10log10((lambda(i)^2)/((4*pi*d0)^2))+X;
end
disp('PL_d0->d(dB)=');
for i=1:12

for j=1:20

PL(i,j)= PL_d0(i)+10*n(i)*log10(d(j)/d0);

end

disp(PL(i));

end
plot (d,PL);

legend (retail store. 'grocery store', 'office hard partition, office soft partition, office soft partition', 'textile chemical", "textile/chemical", "paper/cereals, metalworking. indoor street', 'textile / chemical",

'metalworking');

xlabel('distance in m');

ylabel('path loss in dB');

title('LOG-DISTANCE PATH LOSS INDOOR PROPAGATION MODEL (NO SHADOWING EFFECT)');

grid on;

enter the reference distance:30

7.
clc;
clear all;
close all;

hte=input('enter the tx height:');

hre=1:10;

d=input('enter the distance between tx and rx:'); 
f=input("enter the frequency:");

% SUB URBAN AREA

ahre_1=(1.1*log10(f)-0.7)*hre-(1.56*log10(f)-0.8); 
L50_1=69.55+26.16*log10(f)-13.82*log10(hte)+(44.9-6.55*log10(hte))*log10(d)-ahre_1; 
L50_dB_1=L50_1-(2*log10(f/28)*log10(f/28))-5.4;

% RURAL/OPEN AREA
ahre_2=(1.1*log10(f)-0.7)*hre-(1.56*log10(f)-0.8); 
L50_2=69.55+26.16*log10(f)-13.82*log10(hte)+(44.9-6.55*log10(hte))*log10(d)-ahre_2; 
L50_dB_2=L50_2-(4.78*log10(f)*log10(f))+18.33*log10(f)-40.98;

% LARGE CITY URBAN AREA

if f<3000000000

ahre_3=8.29*(log10(1.54*hre)).*(log10(1.54*hre))-1.1; 
else 
ahre_3=3.2*(log10(11.75*hre)).*(log10(11.75*hre))-4.97;

end 
L50_3=69.55+26.16*log10(f)-13.82*log10(hte)+(44.9-6.55*log10(hte))*log10(d)-ahre_3; 
L50_dB_3=L50_1-(2*log10(f/28)*log10(f/28))-5.4;

% Rx height vs path loss

figure

plot (hre, L50_dB_1,'r', hre, L50_dB_2,'g', hre, L50_3,'b',hre, L50_dB_3,'m'); 
legend ('L_5_0(dB)(medium- small city (suburban area))', 'L_5_0(dB)(medium- small city (rural/open area))', 'L_5_0(dB)(large city (urban area))', 'L_5_0(dB)(large city (suburban area))');

xlabel('distance in m'); 
ylabel ('path loss in dB');

title('HATA MODEL');

grid on;

output:

enter the tx height:30

enter the distance between Tx and Rx:1000

enter the frequency:925000000

8.
clc;

clear all;

close all;

bits=[-1 -1 0 1];

walsh-[1 1 1 1;1 -1 1 -1;1 1 -1 -1;1 -1 -1 1];

d=zeros(1,4);

encryp=zeros(4,4);

for i=1:4

for j=1:4

encryp(i,j)=bits(i)*walsh(i,j);

d(j)=d(j)+encryp(i,j)

end

end

figure(1);

subplot(4,4,1);

stairs(encryp(1,:)); 
title('station 1 code');

xlim([1 5]); 
ylim([-3 3]); 
grid(); 
subplot(4,4,2); 
stairs(encryp(2,:));
title('station 2 code'); 
xlim([1 5]); 
ylim([-3 3]);
subplot(4,4,5); 
stains(encryp(3,:)); 
title('station 3 code'); 
xlim([1 5]); 
ylim([-2 2]);
grid(); 
subplot(4,4,6);
stairs(encryp(4,:));
title('station 4 code'); 
xlim([1 5]); 
ylim([-3 3]);

grid());

subplot(2,2,2);

stairs(d);

title('multiplexed channel data');

xlim[1 5]);

ylim([-4 2]);

grid();

demux=[0 0 0 0];

inner=zeros(4,4):

for i=1:4

for j=1:4

inner(i,j)=d(j)*walsh(i,j);

demux(i)=demux(i)+d(j)*walsh(i,j) 
end

end

demux=demux/4;

subplot(4,4,9);

stairs(inner(1,:));

title('inner product 1');

xlim([1 5]);

ylim(-4 4]);

grid();

subplot(4,4,10);

stairs(inner(2,:));
title('inner product 2');

xlim([1 5]):

ylim([-4 4]);

grid();

subplot(4,4,13):

stairs(inner(3,:));

title('inner product 3'); 
xlim([1 5]);

ylim([-4 4]);

grid();

subplot(4,4,14);

stairs(inner(4,:));

title('inner product 4');

xlim([1 5]);

ylim([-4 4]):

grid();

subplot(2,2,4);

stairs(demux);

title('demultiplexed output');

xlim([1 5]);

ylim([-4 4]);

grid();

9.
clc:

close all: clear all;

% Number of information bits 
m=10^5;

%Range of SNR values 
snr_dB=[0:1:20]; 
for j=1:1:length(snr_dB)

n_err=0;

n_bits = 0;

while n_err < 100

% Generate sequence of binary bits 
inf_bits=round(rand(1,m));

% BPSK modulator 
x=-2*(inf_bits-0.5);

% Noise variance 
N0=1/10^(snr_dB/10);

% Rayleigh channel fading 
h=1/sqrt(2)*[randn(1,length(x))+ i*randn(1,length(x))];

% Send over Gaussian Link to the receiver 
y=h.*x + sqrt(N0/2)*(randn(1.length(x))+i*randn(1,length(x)));

% decision metric

y=y./h;

% Decision making at the Receiver

est_bits=y < 0;

% Calculate Bit Errors

diff=inf_bits-est bits;

n_err=n_err+sum(abs(diff)); 
n_bits=n_bits+length(inf_bits);

end
% Calculate Bit Error Rate 
BER()=n_err/n_bits; 
end

% Rayleigh Theoretical BER 
snr=10.^(snr_dB/10);

theoryBer=0.5.*(1-sqrt(snr./(snr+1))); % AWGN Theoretical BER

theoryBerAWGN=0.5*erfc(sqrt(10.^(snr_dB/10))); 
semilogy(snr_dB,theory Ber,'-','Line Width',2);

hold on:

semilogy(snr_dB,BER,'or','LineWidth',2);

hold on:

semilogy(snr_dB,theoryBerAWGN, 'blad-','LineWidth',2);
legend('Rayleigh Theoretical', 'Rayleigh Simulated', 'AWGN Theoretical"); 
axis(10 20 10^-5 0.5]);

xlabel('SNR (dB)');

ylabel('BER');

grid on;

10.

clc;

clear all:

close all;

N=5; % Number of trials

m=10^6; %Number of bits in each trial

ip = rand(1,m)>0.5; % Generated bits

BPSK=2*ip-1;% Generated BPSK symbols

snr_dB=0:1:15; % range of snr values

snr=10.^(snr_dB/10); % snr value in the normal scale 
L=2; % Number of diversity branches
p_R_MRC=1/2-1/2*(1+1./snr).^(-1/2);

ber_MRC_ana= p_R_MRC.^2.*(1+2*(1-p_R_MRC));

n_err=zeros(1.length(snr_dB)); % Initialize the bit error counter

for p = 1:N

for q=1:length(snr_dB)

% Generate white noise samples

No=1/sqrt(2)*[randn(L,m)+ 1j*randn(L,m)]; % Generate channel coefficient

h=1/sqrt(2)*[randn(L,m)+ 1j*randn(L,m)]; 

symbol=kron(ones(L,1),BPSK);
rec_vector=h.*symbol + 10^(-snr_dB(q)/20)*No;% received symbol

% Decision metric

dec_metric =sum(conj(h).*rec_vector,1)./sum(h.*conj(h), 1); 
ip_hat=real(dec_metric)>0; % Estimated symbol 
n_err(q)=n_err(q)+size(find([ip- ip_hat]),2); 
end

end

ber_MRC_sim = n_err/(N*m);

semilogy(snr_dB,ber_MRC_ana,'*r','Line Width',2)

hold on;

semilogy(snr dB,ber_MRC_sim,'ob', 'Line Width',2) 
legend('ber MRC sim', 'ber MRC ana'); 
xlabel('SNR (dB)');

ylabel('BER');

11.

clc:

close all;

clear all:
m= 10^3;
snr_dB [0:1:20]:

for j=1:1:length(snr_dB) 
n_ err = 0;

n_bits = 0;

while(n_err < 100) 
inf_bits round(rand(1,m));

% BPSK modulator 
x=-2*(inf_bits-0.5);

% Noise variance 
NO=1/10^(snr_dB()/10);

nl= sqrt(N0/2)*abs((randn(1,length(x))+i*randn(1,length(x)))); 
n2=sqrt(N0/2)* abs((randn(1.length(x))+i randn(1,length(x))));
h1=sqrt(0.5)*abs((randn(1.length(x))+i*randn(1,length(x)))); 
h2=sqrt(0.5)*abs((randn(1,length(x))+i*randn(1.length(x))));

yl=hl.*x+nl;
y2=h2.*x+n2;
y_equal=0.5*(y1+y2);

% dec_metric=(norm(y_equal-h1*x-h2*x))^2; 
% Decision making at the Receiver est bits-y_equal <0;

% Calculate Bit Errors

diff-inf bits-est bits;
n_err=n_err+sum(abs(diff));
n_bits=n_bits+length(inf_bits); 
end

% Calculate Bit Error Rate 
BER()=n_err/n_bits;

end

semilogy(snr_dB,BER, 'or-',LineWidth',2);

legend('Rayleigh EGC Simulated', 'Rayleigh Theoretical');

axis([0 20 10^-5 1]);

xlabel('SNR (dB)');

ylabel('BER');

grid on;
